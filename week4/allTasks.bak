(define (accumulate op null-value term a next b)
  (if (> a b) null-value
      (op (term a) (accumulate op null-value term (next a) next b))))

(define (++ a) (+ a 1))

(define (fact-accum n)
  (accumulate * 1 (lambda (a) a) 1 ++ n))

(define (expt-accum x n)
  (accumulate * 1 (lambda (a) x) 1 ++ n))

(expt-accum 2 10)

(define (filter-accum pred? op null-value term a next b)
  (cond ((> a b) null-value)
        ((pred?) (op (term a)
                     (filter-accum pred? op null-value term (next a) next b)))
        (else (filter-accum pred? op null-value term (next a) next b))))

(define (filter-iter pred? op null-value term a next b)
  (define (helper current result)
    (cond ((> current b) result)
          ((pred? current) (helper (next current) (op (term current) result)))
          (else (helper (next current) result))))
  (helper a null-value))


(define (count-divisors n a b)
  (define (term k) 1)
  (define (is-divisor k) (= (remainder n k) 0))
  (filter-iter is-divisor + 0 term a ++ b))

(count-divisors 8 1 8)

(define (count-fixed f a b)
  (define (term x) 1)
  (define (is-fixed x) (= x (f x)))
  (filter-iter is-fixed + 0 term a ++ b))

(count-fixed * 1 110)

(define (powers-sum x n)
  (define (term k) (* k (expt x k)))
  (accumulate + 0 term x ++ n))

(powers-sum 1 5)

(define (func-sum f n)
  (accumulate + 0 f 0 ++ n))

(func-sum + 5)

(define (accumulate op null-value term a next b)
  (if (> a b) null-value
      (op (term a) (accumulate op null-value term (next a) next b))))

(define (combinations n k)
  (define (term x) (/ (+ n (- k) x) x))
  (accumulate * 1 term 1 ++ k))

(combinations 14 7)

(define (filter-iter pred? op null-value term a next b)
  (define (helper current result)
    (cond ((> current b) result)
          ((pred? current) (helper (next current) (op (term current) result)))
          (else (helper (next current) result))))
  (helper a null-value))


(define (squares-product a b)
  (define (pred?
  (define (term
  (filter-iter ? * 1 term a ++ b)
  


